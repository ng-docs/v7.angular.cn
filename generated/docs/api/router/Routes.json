{"id":"api/router/Routes","title":"Routes","contents":"\n\n<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn//api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/Routes\", \"name\": \"Routes\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> > <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20请简述你的修改...#L16-L391\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/angular/angular-cn/tree/7.2.0-rc.0/packages/router/src/config.ts#L16-L391\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  \n  <header class=\"api-header\">\n    <h1 id=\"routes\">Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#routes\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label type-alias\">type-alias</label>\n    \n    \n    \n  </header>\n  \n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n    \n  <section class=\"short-description\">\n    <p translation-result=\"on\">表示路由器配置。</p><p translation-origin=\"off\">Represents router configuration.</p>\n\n\n    <p><a href=\"api/router/Routes#description\">查看\"说明\"...</a></p>\n  </section>\n  \n\n  \n\n  \n  <section class=\"type-alias-overview\">\n    <code-example language=\"ts\" hidecopy=\"true\">\n    type <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = <a href=\"api/router/Route\" class=\"code-anchor\">Route</a>[];\n    </code-example>\n  </section>\n\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 是个表示路由配置的数组。每一个都具有下列属性：</p><p translation-origin=\"off\"><code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> is an array of route configurations. Each one has the following properties:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>path</code> 是一个用于路由匹配 DSL 中的字符串。</p><p translation-origin=\"off\"><code>path</code> is a string that uses the route matcher DSL.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a></code>是一个用来指定路由匹配策略的字符串。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a></code> is a string that specifies the matching strategy.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#matcher\" class=\"code-anchor\">matcher</a></code> 定义了一个用于路径匹配的自定义策略，指定了它就会代替 <code>path</code> 和 <code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#matcher\" class=\"code-anchor\">matcher</a></code> defines a custom strategy for path matching and supersedes <code>path</code> and <code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>component</code> 是一个组件类型。</p><p translation-origin=\"off\"><code>component</code> is a component type.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> 是一个 URL 片段，它将会代替当前匹配的 URL 片段。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> is the url fragment which will replace the current matched segment.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>outlet</code> 是该组件要放进的出口的名字。</p><p translation-origin=\"off\"><code>outlet</code> is the name of the outlet the component should be placed into.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#canActivate\" class=\"code-anchor\">canActivate</a></code> 是一个 DI 令牌的数组，用于查阅 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 处理器，欲知详情，参见 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#canActivate\" class=\"code-anchor\">canActivate</a></code> is an array of DI tokens used to look up CanActivate handlers. See\n<code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> for more info.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#canActivateChild\" class=\"code-anchor\">canActivateChild</a></code> 是一个 DI 令牌的数组，用于查阅 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> 处理器，欲知详情，参见 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#canActivateChild\" class=\"code-anchor\">canActivateChild</a></code> is an array of DI tokens used to look up CanActivateChild handlers. See\n<code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a></code> for more info.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#canDeactivate\" class=\"code-anchor\">canDeactivate</a></code> 是一个 DI 令牌的数组，用于查阅 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 处理器，欲知详情，参见 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#canDeactivate\" class=\"code-anchor\">canDeactivate</a></code> is an array of DI tokens used to look up CanDeactivate handlers. See\n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> for more info.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#canLoad\" class=\"code-anchor\">canLoad</a></code> 是一个 DI 令牌的数组，用于查阅 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 处理器，欲知详情，参见 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#canLoad\" class=\"code-anchor\">canLoad</a></code> is an array of DI tokens used to look up CanLoad handlers. See\n<code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> for more info.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>data</code> 是一个可通过 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供给组件的附加数据。</p><p translation-origin=\"off\"><code>data</code> is additional data provided to the component via <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> 是一个 DI 令牌的映射表，用于查阅数据解析器。欲知详情，参见 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> is a map of DI tokens used to look up data resolvers. See <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> for more\ninfo.</p>\n\n</li>\n<li>\n<p><code><a href=\"api/router/Route#runGuardsAndResolvers\" class=\"code-anchor\">runGuardsAndResolvers</a></code> defines when guards and resolvers will be run. By default they run only\nwhen the matrix parameters of the route change. Options include:</p>\n<ul>\n<li><code>paramsChange</code> (default) - Run guards and resolvers when path or matrix params change. This\nmode ignores query param changes.</li>\n<li><code>paramsOrQueryParamsChange</code> - Guards and resolvers will run when any parameters change. This\nincludes path, matrix, and query params.</li>\n<li><code>pathParamsChange</code> - Run guards and resolvers path or any path params change. This mode is\nuseful if you want to ignore changes to all optional parameters such as query <em>and</em> matrix\nparams.</li>\n<li><code>pathParamsOrQueryParamsChange</code> - Same as <code>pathParamsChange</code>, but also rerun when any query\nparam changes</li>\n<li><code>always</code> - Run guards and resolvers on every navigation.</li>\n<li>(from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean - Use a predicate\nfunction when none of the pre-configured modes fit the needs of the application. An example\nmight be when you need to ignore updates to a param such as <code>sortDirection</code>, but need to\nreload guards and resolvers when changing the <code>searchRoot</code> param.</li>\n</ul>\n<p><code><a href=\"api/router/Route#runGuardsAndResolvers\" class=\"code-anchor\">runGuardsAndResolvers</a></code> 定义了路由守卫和解析器的运行时机。默认情况下，它们只会在路由的矩阵参数（<code>#</code>）变化时才会执行。\n当设置为 <code>paramsOrQueryParamsChange</code> 时，它们在查询参数（<code>?</code>）变化时也会执行。当设置为 <code>always</code> 时，它们每次都会执行。</p>\n</li>\n<li>\n<p translation-result=\"on\"><code>children</code> 是一个子路由定义构成的数组。</p><p translation-origin=\"off\"><code>children</code> is an array of child route definitions.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code><a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a></code> 是一个用于惰性加载子路由的引用。欲知详情，参见 <code><a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code>。</p><p translation-origin=\"off\"><code><a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a></code> is a reference to lazy loaded child routes. See <code><a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code> for more\ninfo.</p>\n\n</li>\n</ul>\n\n</section>\n\n\n\n  \n<section class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"simple-configuration\" translation-result=\"on\">简单配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#simple-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"simple-configuration\">Simple Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#simple-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">当导航到 <code>/team/11/user/bob</code> 时，路由器将会创建一个 Team 组件，其中包含一个 User 组件。</p><p translation-origin=\"off\">When navigating to <code>/team/11/user/bob</code>, the router will create the team component with the user\ncomponent in it.</p>\n\n<h3 id=\"multiple-outlets\" translation-result=\"on\">多重路由出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"multiple-outlets\">Multiple Outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<p translation-result=\"on\">在导航到 <code>/team/11(aux:chat/jim)</code> 时，路由器将会在创建了 Chat 组件之后创建一个 Team 组件。Chat 组件会被放进 <code>aux</code> 路由出口中。</p><p translation-origin=\"off\">When navigating to <code>/team/11(aux:chat/jim)</code>, the router will create the team component next to\nthe chat component. The chat component will be placed into the aux outlet.</p>\n\n<h3 id=\"wild-cards\" translation-result=\"on\">通配符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#wild-cards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"wild-cards\">Wild Cards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#wild-cards\"><i class=\"material-icons\">link</i></a></h3>\n\n<code-example>\n[{\n  path: '**',\n  component: Sink\n}]\n</code-example>\n<p translation-result=\"on\">无论你导航到哪里，路由器都会实例化这个 Sink 组件。</p><p translation-origin=\"off\">Regardless of where you navigate to, the router will instantiate the sink component.</p>\n\n<h3 id=\"redirects\" translation-result=\"on\">重定向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"redirects\">Redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    <a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a>: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">当导航到 '/team/11/legacy/user/jim' 时，路由器将会把 URL 改成 '/team/11/user/jim'，然后实例化一个 Team 组件，其中包含一个 User 组件。</p><p translation-origin=\"off\">When navigating to '/team/11/legacy/user/jim', the router will change the url to\n'/team/11/user/jim', and then will instantiate the team component with the user component\nin it.</p>\n\n<p translation-result=\"on\">如果 <code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> 的值是以 <code>/</code> 开头的，则会执行一次绝对导航。比如，如果上面的例子中我们把 <code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> 改为 <code>/user/:name</code>，\n那么最终的 url 就会是 <code>'/user/jim'</code>。</p><p translation-origin=\"off\">If the <code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> value starts with a '/', then it is an absolute redirect. E.g., if in the\nexample above we change the <code><a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a></code> to <code>/user/:name</code>, the result url will be '/user/jim'.</p>\n\n<h3 id=\"empty-path\" translation-result=\"on\">空路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#empty-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"empty-path\">Empty Path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#empty-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">空路径路由可用来实例化一些不\"消费\"任何 url 区段的组件。来看下列配置：</p><p translation-origin=\"off\">Empty-path route configurations can be used to instantiate components that do not 'consume'\nany url segments. Let's look at the following configuration:</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">当导航到 <code>/team/11</code> 时，路由器就会实例化 AllUsers 组件。</p><p translation-origin=\"off\">When navigating to <code>/team/11</code>, the router will instantiate the AllUsers component.</p>\n\n<p translation-result=\"on\">空路径路由还可以有子路由。</p><p translation-origin=\"off\">Empty-path routes can have children.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>\n    }]\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">当导航到 <code>/team/11/user/jim</code> 时，路由器将会实例化 <code>WrapperCmp</code>，其中还有一个 <code><a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a></code> 组件。</p><p translation-origin=\"off\">When navigating to <code>/team/11/user/jim</code>, the router will instantiate the wrapper component with\nthe user component in it.</p>\n\n<p translation-result=\"on\">空路径路由会继承它的父路由的参数和数据。这是因为它不能拥有自己的参数，所以，它通常会把其父路由的参数和数据当做自己的使用。</p><p translation-origin=\"off\">An empty path route inherits its parent's params and data. This is because it cannot have its\nown params, and, as a result, it often uses its parent's params and data as its own.</p>\n\n<h3 id=\"matching-strategy\" translation-result=\"on\">匹配策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#matching-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"matching-strategy\">Matching Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#matching-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">默认情况下，路由器会查看当前 URL 中还剩下什么，并检查它是否以指定的路径开头（比如 <code>/team/11/user</code> 就是用 <code>team/:id</code> 开头的）。</p><p translation-origin=\"off\">By default the router will look at what is left in the url, and check if it starts with\nthe specified path (e.g., <code>/team/11/user</code> starts with <code>team/:id</code>).</p>\n\n<p translation-result=\"on\">我们可以修改匹配策略，以确保该路径匹配所有尚未消费的 url，它相当于 <code>unconsumedUrl === path</code> 或正则表达式中的 <code>$</code>。</p><p translation-origin=\"off\">We can change the matching strategy to make sure that the path covers the whole unconsumed url,\nwhich is akin to <code>unconsumedUrl === path</code> or <code>$</code> regular expressions.</p>\n\n<p translation-result=\"on\">如果要把空路径路由重定向到别处，这尤其重要。</p><p translation-origin=\"off\">This is particularly important when redirecting empty-path routes.</p>\n\n<code-example>\n[{\n  path: '',\n  <a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: 'prefix', //default\n  <a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a>: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p translation-result=\"on\">由于空路径是任何 url 的前缀，所以即使想导航到 '/main'，路由器仍然会执行这次跳转。</p><p translation-origin=\"off\">Since an empty path is a prefix of any url, even when navigating to '/main', the router will\nstill apply the redirect.</p>\n\n<p translation-result=\"on\">如果指定了 <code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: <a href=\"api/core/Version#full\" class=\"code-anchor\">full</a></code>，则路由器只有在导航到 <code>'/'</code> 时才会执行这次跳转。</p><p translation-origin=\"off\">If <code><a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: <a href=\"api/core/Version#full\" class=\"code-anchor\">full</a></code> is provided, the router will apply the redirect if and only if navigating to\n'/'.</p>\n\n<code-example>\n[{\n  path: '',\n  <a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: '<a href=\"api/core/Version#full\" class=\"code-anchor\">full</a>',\n  <a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a>: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" translation-result=\"on\">无组件路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#componentless-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"componentless-routes\">Componentless Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#componentless-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当需要在兄弟组件之间共享参数时，这非常有用。</p><p translation-origin=\"off\">It is useful at times to have the ability to share parameters between sibling components.</p>\n\n<p translation-result=\"on\">假设我们有两个组件 <code>ChildCmp</code> 和 <code>AuxCmp</code>，它们彼此相邻，并且都需要一个 <code>id</code> 参数。</p><p translation-origin=\"off\">Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both\nof them require some id parameter.</p>\n\n<p translation-result=\"on\">解决方案之一就是伪造一个父组件，这样一来，这些兄弟组件就可以通过它获取同一个 id 参数了。但这还不理想。我们要改用无组件路由。</p><p translation-origin=\"off\">One way to do that would be to have a bogus parent component, so both the siblings can get the id\nparameter from it. This is not ideal. Instead, you can use a componentless route.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">这样当导航到 <code>parent/10/(<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>//aux:b)</code> 时，该路由将会先后实例化主要的子控件和辅助子控件。在这个例子中，应用组件必须定义主路由出口和 <code>aux</code> 出口。</p><p translation-origin=\"off\">So when navigating to <code>parent/10/(<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>//aux:b)</code>, the route will instantiate the main child and aux\nchild components next to each other. In this example, the application component\nhas to have the primary and aux outlets defined.</p>\n\n<p translation-result=\"on\">路由器还会把这个无组件父路由的 <code>params</code>、<code>data</code> 和 <code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> 结果合并到子路由的 <code>params</code>、<code>data</code> 和 <code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> 中。\n之所以能这样，是因为这里没有组件能接收这个无组件父路由的激活路由信息，所以只能合并到子路由中。</p><p translation-origin=\"off\">The router will also merge the <code>params</code>, <code>data</code>, and <code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> of the componentless parent into\nthe <code>params</code>, <code>data</code>, and <code><a href=\"api/router/Route#resolve\" class=\"code-anchor\">resolve</a></code> of the children. This is done because there is no component\nthat can inject the activated route of the componentless parent.</p>\n\n<p translation-result=\"on\">当用如下方式定义子组件时，这会非常有用：</p><p translation-origin=\"off\">This is especially useful when child components are defined as follows:</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">使用这种配置，导航到 '/parent/10' 时就会创建主要的子组件和辅助子组件。</p><p translation-origin=\"off\">With this configuration in place, navigating to '/parent/10' will create the main child and aux\ncomponents.</p>\n\n<h3 id=\"lazy-loading\" translation-result=\"on\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loading\">Lazy Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Routes#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">惰性加载可以通过把应用拆分成多个发布包，并按需加载它们，来加速应用的启动时间。\n路由器的设计让惰性加载非常简易。只要用 <code><a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a></code> 属性代替 <code>children</code> 属性就可以了，例如：</p><p translation-origin=\"off\">Lazy loading speeds up our application load time by splitting it into multiple bundles, and\nloading them on demand. The router is designed to make lazy loading simple and easy. Instead of\nproviding the children property, you can provide the <code><a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a></code> property, as follows:</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  <a href=\"api/router/Route#loadChildren\" class=\"code-anchor\">loadChildren</a>: 'team'\n}]\n</code-example>\n<p translation-result=\"on\">路由器会使用已注册的 <code><a href=\"api/core/NgModuleFactoryLoader\" class=\"code-anchor\">NgModuleFactoryLoader</a></code> 来获取与 <code>team</code> 相关的 NgModule。\n然后，它就会提取出那个 NgModule 中定义的一组路由，并透明的把那些路由添加到主路由配置中。</p><p translation-origin=\"off\">The router will use registered NgModuleFactoryLoader to fetch an NgModule associated with 'team'.\nThen it will extract the set of routes defined in that NgModule, and will transparently add\nthose routes to the main configuration.</p>\n\n\n</section>\n\n\n\n  </div>\n</article>\n\n<!-- links to this doc:\n - api/router\n - api/router/Data\n - api/router/LoadChildren\n - api/router/LoadChildrenCallback\n - api/router/ResolveData\n - api/router/Route\n - api/router/Router\n - api/router/RunGuardsAndResolvers\n - guide/cheatsheet\n - guide/deployment\n - guide/entry-components\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-faq\n - guide/router\n - guide/upgrade\n - guide/visual-studio-2015\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - /api\n - api/common/http/HttpEventType#User\n - api/core/NgModuleFactoryLoader\n - api/core/Version#full\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/Route\n - api/router/Route#canActivate\n - api/router/Route#canActivateChild\n - api/router/Route#canDeactivate\n - api/router/Route#canLoad\n - api/router/Route#loadChildren\n - api/router/Route#matcher\n - api/router/Route#pathMatch\n - api/router/Route#redirectTo\n - api/router/Route#resolve\n - api/router/Route#runGuardsAndResolvers\n - api/router/RouterLinkWithHref\n - api/router/Routes#componentless-routes\n - api/router/Routes#description\n - api/router/Routes#empty-path\n - api/router/Routes#lazy-loading\n - api/router/Routes#matching-strategy\n - api/router/Routes#multiple-outlets\n - api/router/Routes#redirects\n - api/router/Routes#routes\n - api/router/Routes#simple-configuration\n - api/router/Routes#usage-notes\n - api/router/Routes#wild-cards\n - https://github.com/angular/angular-cn/edit/aio/packages/router/src/config.ts?message=docs(router)%3A%20请简述你的修改...#L16-L391\n - https://github.com/angular/angular-cn/tree/7.2.0-rc.0/packages/router/src/config.ts#L16-L391\n-->"}