{"id":"guide/deployment","title":"Deployment","contents":"\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/deployment.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"deployment\" translation-result=\"on\">部署<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"deployment\">Deployment<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">当你准备把 Angular 应用部署到远程服务器上时，有很多关于部署的选项。</p><p translation-origin=\"off\">When you are ready to deploy your Angular application to a remote server, you have various options for\ndeployment.</p>\n\n<a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a>\n<h2 id=\"simplest-deployment-possible\" translation-result=\"on\">最简化的部署方式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simplest-deployment-possible\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"simplest-deployment-possible\">Simplest deployment possible<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simplest-deployment-possible\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">最简化的部署方式就是为开发环境构建，并把其输出复制到 Web 服务器上。</p><p translation-origin=\"off\">For the simplest deployment, create a production build and copy the output directory to a web server.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"> 使用开发环境进行构建</p><p translation-origin=\"off\">Start with the production build:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把输出目录（默认为 <code>dist/</code>）下的<em>每个文件</em>都复制到到服务器上的某个目录下。</p><p translation-origin=\"off\">Copy <em>everything</em> within the output folder (<code>dist/</code> by default) to a folder on the server.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">   配置服务器，让缺失的文件都重定向到 <code>index.html</code> 上。\n欲知详情，参见<a href=\"guide/deployment#fallback\">稍后</a>的服务端重定向部分。</p><p translation-origin=\"off\">Configure the server to redirect requests for missing files to <code>index.html</code>.\nLearn more about server-side redirects <a href=\"guide/deployment#fallback\">below</a>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">这是对应用进行生产环境部署的最简方式。</p><p translation-origin=\"off\">This is the simplest production-ready deployment of your application.</p>\n\n<a id=\"deploy-to-github\"></a>\n<h2 id=\"deploy-to-github-pages\" translation-result=\"on\">发布到 GitHub pages（页面服务）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"deploy-to-github-pages\">Deploy to GitHub pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deploy-to-github-pages\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">另一种发布 Angular 应用的简单途径是使用 <a href=\"https://help.github.com/articles/what-is-github-pages/\">GitHub Pages</a>。</p><p translation-origin=\"off\">Another simple way to deploy your Angular app is to use <a href=\"https://help.github.com/articles/what-is-github-pages/\">GitHub Pages</a>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">   你需要<a href=\"https://github.com/join\">创建一个 GitHub 账号</a>（如果没有的话），然后为你的项目<a href=\"https://help.github.com/articles/create-a-repo/\">创建一个仓库</a>。记下 GitHub 中的用户名和项目名。</p><p translation-origin=\"off\">You need to <a href=\"https://github.com/join\">create a GitHub account</a> if you don't have one, and then <a href=\"https://help.github.com/articles/create-a-repo/\">create a repository</a> for your project.\nMake a note of the user name and project name in GitHub.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 Angular CLI 命令 <a href=\"cli/build\"><code>ng build</code></a> 来构建这个 GitHub 项目，选项如下：</p><p translation-origin=\"off\">Build your project using Github project name, with the Angular CLI command <a href=\"cli/build\"><code>ng build</code></a> and the options shown here:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --output-path docs --base-href <project_name>\n </project_name></code-example>\n</li>\n<li>\n<p translation-result=\"on\">当构建完成时，把 <code>docs/index.html</code> 复制为 <code>docs/404.html</code>。</p><p translation-origin=\"off\">When the build is complete, make a copy of <code>docs/index.html</code> and name it <code>docs/404.html</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的更改，并推送。</p><p translation-origin=\"off\">Commit your changes and push.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 GitHub 的项目页中，把该项目配置为<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">从 docs 目录下发布</a>。</p><p translation-origin=\"off\">On the GitHub project page, configure it to <a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">publish from the docs folder</a>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">你可以到 <code>https://&#x3C;user_name>.github.io/&#x3C;project_name>/</code> 中查看部署好的页面。</p><p translation-origin=\"off\">You can see your deployed page at <code>https://&#x3C;user_name>.github.io/&#x3C;project_name>/</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"> 参见 <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>，这个包用到了全部这些特性，还提供了一些额外功能。</p><p translation-origin=\"off\"> Check out <a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>, a full featured package that does all this for you and has extra functionality.</p>\n\n</div>\n<hr>\n<a id=\"server-configuration\"></a>\n<h2 id=\"server-configuration\" translation-result=\"on\">服务端配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"server-configuration\">Server configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">这一节涵盖了你可能对服务器或准备部署到服务器的文件要做的那些修改。</p><p translation-origin=\"off\">This section covers changes you may have make to the server or to files deployed to the server.</p>\n\n<a id=\"fallback\"></a>\n<h3 id=\"routed-apps-must-fallback-to-indexhtml\" translation-result=\"on\">带路由的应用必须以 <code>index.html</code> 作为后备页面<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fallback-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"routed-apps-must-fallback-to-indexhtml\">Routed apps must fallback to <code>index.html</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fallback-to-indexhtml\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 应用很适合用简单的静态 HTML 服务器提供服务。\n你不需要服务端引擎来动态合成应用页面，因为 Angular 会在客户端完成这件事。</p><p translation-origin=\"off\">Angular apps are perfect candidates for serving with a simple static HTML server.\nYou don't need a server-side engine to dynamically compose application pages because\nAngular does that on the client-side.</p>\n\n<p translation-result=\"on\">如果该应用使用 Angular 路由器，你就必须配置服务器，让它对不存在的文件返回应用的宿主页(<code>index.html</code>)。</p><p translation-origin=\"off\">If the app uses the Angular router, you must configure the server\nto return the application's host page (<code>index.html</code>) when asked for a file that it does not have.</p>\n\n<a id=\"deep-link\"></a>\n<p translation-result=\"on\">带路由的应用应该支持“深链接”。\n所谓<em>深链接</em>就是指一个 URL，它用于指定到应用内某个组件的路径。\n比如，<code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code> 就是一个到英雄详情页面的<em>深链接</em>，用于显示 <code>id: 42</code> 的英雄。</p><p translation-origin=\"off\">A routed application should support \"deep links\".\nA <em>deep link</em> is a URL that specifies a path to a component inside the app.\nFor example, <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code> is a <em>deep link</em> to the hero detail page\nthat displays the hero with <code>id: 42</code>.</p>\n\n<p translation-result=\"on\">当用户从运行中的客户端应用导航到这个 URL 时，这没问题。\nAngular 路由器会拦截这个 URL，并且把它路由到正确的页面。</p><p translation-origin=\"off\">There is no issue when the user navigates to that URL from within a running client.\nThe Angular router interprets the URL and routes to that page and hero.</p>\n\n<p translation-result=\"on\">但是，当从邮件中点击链接或在浏览器地址栏中输入它或仅仅在英雄详情页刷新下浏览器时，所有这些操作都是由浏览器本身处理的，在应用的控制范围之外。\n浏览器会直接向服务器请求那个 URL，路由器没机会插手。</p><p translation-origin=\"off\">But clicking a link in an email, entering it in the browser address bar,\nor merely refreshing the browser while on the hero detail page —\nall of these actions are handled by the browser itself, <em>outside</em> the running application.\nThe browser makes a direct request to the server for that URL, bypassing the router.</p>\n\n<p translation-result=\"on\">静态服务器会在收到对 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/</code> 的请求时返回 <code>index.html</code>，但是会拒绝对 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code> 的请求，\n并返回一个 <code>404 - Not Found</code> 错误，除非，它被配置成了返回 <code>index.html</code>。</p><p translation-origin=\"off\">A static server routinely returns <code>index.html</code> when it receives a request for <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/</code>.\nBut it rejects <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code> and returns a <code>404 - Not Found</code> error <em>unless</em> it is\nconfigured to return <code>index.html</code> instead.</p>\n\n<h4 id=\"fallback-configuration-examples\" translation-result=\"on\">后备页面配置范例<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"fallback-configuration-examples\">Fallback configuration examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">没有一种配置可以适用于所有服务器。\n后面这些部分会描述对常见服务器的配置方式。\n这个列表虽然不够详尽，但可以为你提供一个良好的起点。</p><p translation-origin=\"off\">There is no single configuration that works for every server.\nThe following sections describe configurations for some of the most popular servers.\nThe list is by no means exhaustive, but should provide you with a good starting point.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">   <a href=\"https://httpd.apache.org/\">Apache</a>：在 <code>.htaccess</code> 文件中添加一个<a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">重写规则</a>，\n代码如下（<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">出处</a>）：</p><p translation-origin=\"off\"><a href=\"https://httpd.apache.org/\">Apache</a>: add a\n<a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">rewrite rule</a> to the <code>.htaccess</code> file as shown\n(<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/</a>):</p>\n\n  <code-example format=\".\">\n    RewriteEngine On\n    # If an existing asset or directory is requested go to it as it is\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]\n    RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d\n    RewriteRule ^ - [L]\n<p>    # If the requested resource doesn't exist, use index.html\nRewriteRule ^ /index.html\n</p>\n</code-example></li>\n<li>\n<p translation-result=\"on\">   <a href=\"http://nginx.org/\">NGinx</a>：使用 <code>try_files</code> 指向 <code>index.html</code>，详细描述见<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Web 应用的前端控制器模式</a>。</p><p translation-origin=\"off\"><a href=\"http://nginx.org/\">Nginx</a>: use <code>try_files</code>, as described in\n<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Front Controller Pattern Web Apps</a>,\nmodified to serve <code>index.html</code>:</p>\n\n  <code-example format=\".\">\n    try_files $uri $uri/ /index.html;\n  </code-example>\n</li>\n<li>\n<p translation-result=\"on\">   <a href=\"https://www.iis.net/\">IIS</a>：往 <code>web.config</code> 中添加一条重写规则，类似于<a href=\"http://stackoverflow.com/a/26152011/2116927\">这里</a>：</p><p translation-origin=\"off\"><a href=\"https://www.iis.net/\">IIS</a>: add a rewrite rule to <code>web.config</code>, similar to the one shown\n<a href=\"http://stackoverflow.com/a/26152011/2116927\">here</a>:</p>\n\n  <code-example format=\".\">\n    &#x3C;system.webServer>\n      &#x3C;rewrite>\n        &#x3C;rules>\n          &#x3C;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\">\n            &#x3C;match url=\".*\" />\n            &#x3C;conditions logicalGrouping=\"MatchAll\">\n              &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n              &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n            &#x3C;/conditions>\n            &#x3C;action type=\"Rewrite\" url=\"/index.html\" />\n          &#x3C;/rule>\n        &#x3C;/rules>\n      &#x3C;/rewrite>\n    &#x3C;/system.webServer>\n  </code-example>\n</li>\n<li>\n<p translation-result=\"on\">   <a href=\"https://pages.github.com/\">GitHub 页面服务</a>：你没办法<a href=\"https://github.com/isaacs/github/issues/408\">直接配置</a> Github 的页面服务，但可以添加一个 404 页，只要把 <code>index.html</code> 复制到 <code>404.html</code> 就可以了。\n它仍然会给出一个 404 响应，但是浏览器将会正确处理该页，并正常加载该应用。\n使用<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">在主分支的 <code>docs/</code> 下启动服务</a>\n并<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">创建一个 <code>.nojekyll</code> 文件</a>也是一个好办法。</p><p translation-origin=\"off\"><a href=\"https://pages.github.com/\">GitHub Pages</a>: you can't\n<a href=\"https://github.com/isaacs/github/issues/408\">directly configure</a>\nthe GitHub Pages server, but you can add a 404 page.\nCopy <code>index.html</code> into <code>404.html</code>.\nIt will still be served as the 404 response, but the browser will process that page and load the app properly.\nIt's also a good idea to\n<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">serve from <code>docs/</code> on master</a>\nand to\n<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">create a <code>.nojekyll</code> file</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\">   <a href=\"https://firebase.google.com/docs/hosting/\">Firebase 主机服务</a>：添加一条<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">重写规则</a>。</p><p translation-origin=\"off\"><a href=\"https://firebase.google.com/docs/hosting/\">Firebase hosting</a>: add a\n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">rewrite rule</a>.</p>\n\n  <code-example format=\".\">\n    \"rewrites\": [ {\n      \"source\": \"**\",\n      \"destination\": \"/index.html\"\n    } ]\n  </code-example>\n</li>\n</ul>\n<a id=\"cors\"></a>\n<h3 id=\"requesting-services-from-a-different-server-cors\" translation-result=\"on\">请求来自另一个服务器的服务（CORS）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"requesting-services-from-a-different-server-cors\">Requesting services from a different server (CORS)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 开发者在向与该应用的宿主服务器不同域的服务器发起请求时，可能会遇到一种<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" target=\"_blank\" title=\"Cross-origin resource sharing\"><i>跨域资源共享（CORS）</i></a>错误。\n浏览器会阻止该请求，除非得到那台服务器的明确许可。</p><p translation-origin=\"off\">Angular developers may encounter a\n<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\">\n<i>cross-origin resource sharing</i></a> error when making a service request (typically a data service request)\nto a server other than the application's own host server.\nBrowsers forbid such requests unless the server permits them explicitly.</p>\n\n<p translation-result=\"on\">客户端应用对这种错误无能为力。\n服务器必须配置成可以接受来自该应用的请求。\n要了解如何对特定的服务器开启 CORS，参见<a href=\"http://enable-cors.org/server.html\" target=\"_blank\" title=\"Enabling CORS server\">enable-cors.org</a>。</p><p translation-origin=\"off\">There isn't anything the client application can do about these errors.\nThe server must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at\n<a href=\"http://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>.</p>\n\n<hr>\n<a id=\"optimize\"></a>\n<h2 id=\"production-optimizations\" translation-result=\"on\">为生产环境优化<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"production-optimizations\">Production optimizations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-optimizations\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>--prod</code> 标志具有如下优化特性。</p><p translation-origin=\"off\">The <code>--prod</code> <em>meta-flag</em> engages the following build optimization features.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/aot-compiler\">预先(AOT)编译</a>：预编译 Angular 的组件模板。</p><p translation-origin=\"off\"><a href=\"guide/aot-compiler\">Ahead-of-Time (AOT) Compilation</a>: pre-compiles Angular component templates.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/deployment#enable-prod-mode\">生产模式</a>：部署到启用了<em>生产模式</em>的生产环境。</p><p translation-origin=\"off\"><a href=\"guide/deployment#enable-prod-mode\">Production mode</a>: deploys the production environment which enables <em>production mode</em>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">打包：把你的多个应用于库文件拼接到少量包（bundle）中。</p><p translation-origin=\"off\">Bundling: concatenates your many application and library files into a few bundles.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">最小化：删除多余的空格、注释和可选令牌。</p><p translation-origin=\"off\">Minification: removes excess whitespace, comments, and optional tokens.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">混淆/丑化：重写代码，使用简短的、不容易理解的变量名和函数名。</p><p translation-origin=\"off\">Uglification: rewrites code to use short, cryptic variable and function names.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">消除死代码：删除未引用过的模块和很多未用到的代码。</p><p translation-origin=\"off\">Dead code elimination: removes unreferenced modules and much unused code.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">要了解关于 CLI 构建选项及其作用的更多知识，参见 <a href=\"cli/build\"><code>ng build</code></a>。</p><p translation-origin=\"off\">See <a href=\"cli/build\"><code>ng build</code></a> for more about CLI build options and what they do.</p>\n\n<a id=\"enable-prod-mode\"></a>\n<h3 id=\"enable-runtime-production-mode\" translation-result=\"on\">启用生产模式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#enable-runtime-production-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"enable-runtime-production-mode\">Enable runtime production mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#enable-runtime-production-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">除了构建期优化之外，Angular 还支持运行期生产模式。Angular 应用默认运行在开发模式下，你可以在浏览器的控制台中看到如下信息：</p><p translation-origin=\"off\">In addition to build optimizations, Angular also has a runtime production mode. Angular apps run in development mode by default, as you can see by the following message on the browser console:</p>\n\n<code-example format=\"nocode\">\n  Angular is running in the development mode. Call <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>() to enable the production mode.\n</code-example>\n<p translation-result=\"on\">切换到<em>生产模式</em>可以通过禁用开发阶段特有的检查（比如双重变更检测周期）来让它运行得更快。</p><p translation-origin=\"off\">Switching to <em>production mode</em> makes it run faster by disabling development specific checks such as the dual change detection cycles.</p>\n\n<p translation-result=\"on\">如果在构建时添加了 <code>--prod</code> 标识，也会同时启用<em>运行期生产模式</em>。</p><p translation-origin=\"off\">When you enable production builds via <code>--prod</code> command line flag, the runtime production mode is enabled as well.</p>\n\n<a id=\"lazy-loading\"></a>\n<h3 id=\"lazy-loading\" translation-result=\"on\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"lazy-loading\">Lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">通过只加载应用启动时绝对必须的那些模块，你可以极大缩短应用启动的时间。</p><p translation-origin=\"off\">You can dramatically reduce launch time by only loading the application modules that\nabsolutely must be present when the app starts.</p>\n\n<p translation-result=\"on\">可以配置 Angular 的路由器，来推迟所有其它模块（及其相关代码）的加载时机，方法有<a href=\"guide/router#preloading\" title=\"Preloading\">一直等到应用启动完毕</a>，或者当用到时才按需<a href=\"guide/router#asynchronous-routing\" title=\"Lazy loading\"><em>惰性加载</em></a>。</p><p translation-origin=\"off\">Configure the Angular Router to defer loading of all other modules (and their associated code), either by\n<a href=\"guide/router#preloading\" title=\"Preloading\">waiting until the app has launched</a>\nor by <a href=\"guide/router#asynchronous-routing\" title=\"Lazy loading\"><em>lazy loading</em></a>\nthem on demand.</p>\n\n<div class=\"alert is-helpful\">\n<h4 id=\"dont-eagerly-import-something-from-a-lazy-loaded-module\" translation-result=\"on\">不要急性（eagerly）导入来自惰性加载模块中的任何东西<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"dont-eagerly-import-something-from-a-lazy-loaded-module\">Don't eagerly import something from a lazy-loaded module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">如果要惰性加载某个模块，就要小心别在应用启动时要急性加载的模块（比如根模块 <code>AppModule</code>）中导入它。\n如果那么做，该模块就会立刻加载起来。</p><p translation-origin=\"off\">If you mean to lazy-load a module, be careful not import it\nin a file that's eagerly loaded when the app starts (such as the root <code>AppModule</code>).\nIf you do that, the module will be loaded immediately.</p>\n\n<p translation-result=\"on\">配置打包方式时必须考虑惰性加载。\n因为默认情况下惰性加载的模块没有在 JavaScript 中导入过，因此打包器默认会排除它们。\n打包器不认识路由器配置，也就不能为惰性加载的模块创建独立的包。\n你必须手动创建这些包。</p><p translation-origin=\"off\">The bundling configuration must take lazy loading into consideration.\nBecause lazy-loaded modules aren't imported in JavaScript, bundlers exclude them by default.\nBundlers don't know about the router configuration and can't create separate bundles for lazy-loaded modules.\nYou would have to create these bundles manually.</p>\n\n<p translation-result=\"on\">CLI 会运行 <a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular Ahead-of-Time Webpack 插件</a>，它会自动识别出惰性加载的 <code>NgModules</code>，并为它们创建独立的包。</p><p translation-origin=\"off\">The CLI runs the\n<a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular Ahead-of-Time Webpack Plugin</a>\nwhich automatically recognizes lazy-loaded <code>NgModules</code> and creates separate bundles for them.</p>\n\n</div>\n<a id=\"measure\"></a>\n<h3 id=\"measure-performance\" translation-result=\"on\">测量性能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"measure-performance\">Measure performance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你对哪些东西拖慢了应用有更加清晰、精确的了解，就可以更好地决定优化什么以及如何优化。\n慢的原因可能和你所想的不一样。\n你可能花费了大量的时间和金钱来优化一些实际上无关紧要的东西，甚至可能让应用变得更慢。\n你应该测量应用在运行环境中的实际行为，这才是最重要的。</p><p translation-origin=\"off\">You can make better decisions about what to optimize and how when you have a clear and accurate understanding of\nwhat's making the application slow.\nThe cause may not be what you think it is.\nYou can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower.\nYou should measure the app's actual behavior when running in the environments that are important to you.</p>\n\n<p translation-result=\"on\"><a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">\nChrome DevTools 的网络和性能页</a>是你开始学习如何测量性能的好地方。</p><p translation-origin=\"off\">\nThe\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">\nChrome DevTools Network Performance page</a> is a good place to start learning about measuring performance.\n</p>\n\n<p translation-result=\"on\"><a href=\"https://www.webpagetest.org/\">WebPageTest</a>工具是另一个不错的选择，它还能帮你验证这次部署是否成功。</p><p translation-origin=\"off\">The <a href=\"https://www.webpagetest.org/\">WebPageTest</a> tool is another good choice\nthat can also help verify that your deployment was successful.</p>\n\n<a id=\"inspect-bundle\"></a>\n<h3 id=\"inspect-the-bundles\" translation-result=\"on\">检查发布包<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"inspect-the-bundles\">Inspect the bundles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#inspect-the-bundles\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a> 工具可以帮你在生产环境构建之后探查 JavaScript 包。</p><p translation-origin=\"off\">The <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a>\ntool is a great way to inspect the generated JavaScript bundles after a production build.</p>\n\n<p translation-result=\"on\">安装 <code>source-map-explorer</code>：</p><p translation-origin=\"off\">Install <code>source-map-explorer</code>:</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  npm install source-map-explorer --save-dev\n</code-example>\n<p translation-result=\"on\">为生产环境构建应用，包括源码映射表（source map）</p><p translation-origin=\"off\">Build your app for production <em>including the source maps</em></p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --source-map\n</code-example>\n<p translation-result=\"on\">在 <code>dist/</code> 目录下列出生成的包。</p><p translation-origin=\"off\">List the generated bundles in the <code>dist/</code> folder.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  ls dist/*.bundle.js\n</code-example>\n<p translation-result=\"on\">运行浏览器来生成其中一个包的图形化表示。\n下面的例子展示了 <code>main</code> 包的图表。</p><p translation-origin=\"off\">Run the explorer to generate a graphical representation of one of the bundles.\nThe following example displays the graph for the <em>main</em> bundle.</p>\n\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/source-map-explorer dist/main.*.bundle.js\n</code-example>\n<p translation-result=\"on\"><code>source-map-explorer</code> 会分析与包一起生成的 source map，并画出所有依赖的地图，精确展示哪些类包含在哪个包中。</p><p translation-origin=\"off\">The <code>source-map-explorer</code> analyzes the source map generated with the bundle and draws a map of all dependencies,\nshowing exactly which classes are included in the bundle.</p>\n\n<p translation-result=\"on\">下面是 \"快速上手\" 应用中 <code>main</code> 包的输出。</p><p translation-origin=\"off\">Here's the output for the <em>main</em> bundle of the QuickStart.</p>\n\n<figure>\n  <img src=\"generated/images/guide/cli-quickstart/quickstart-sourcemap-explorer.png\" alt=\"quickstart sourcemap explorer\" width=\"767\" height=\"401\">\n</figure>\n<a id=\"base-tag\"></a>\n<h2 id=\"the-base-tag\" translation-result=\"on\"><code>base</code> 标签<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-base-tag\">The <code>base</code> tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">HTML 的 <a href=\"/guide/router\"><em>&#x3C;base href=\"...\"/></em></a> 标签指定了用于解析静态文件（如图片、脚本和样式表）相对地址的基地址。\n比如，对于 <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/my/app/\"></code>，浏览器就会把 <code>some/place/foo.jpg</code> 这样的 URL 解析成到 <code>my/app/some/place/foo.jpg</code> 的请求。\n在导航期间，Angular 路由器使用 <em>base href</em> 作为到组件模板文件和模块文件的基地址。</p><p translation-origin=\"off\">The HTML <a href=\"/guide/router\"><em>&#x3C;base href=\"...\"/></em></a>\nspecifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets.\nFor example, given the <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/my/app/\"></code>, the browser resolves a URL such as <code>some/place/foo.jpg</code>\ninto a server request for <code>my/app/some/place/foo.jpg</code>.\nDuring navigation, the Angular router uses the <em>base href</em> as the base path to component, template, and module files.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">另一种方式参见 <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a>。</p><p translation-origin=\"off\">See also the <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a> alternative.</p>\n\n</div>\n<p translation-result=\"on\">在开发期间，你通常会在存有 <code>index.html</code> 的目录下启动开发服务器。\n那就是根目录，你要在 <code>index.html</code> 的顶部附近添加 <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/\"></code>，因为 <code>/</code> 就是该应用的根路径。</p><p translation-origin=\"off\">In development, you typically start the server in the folder that holds <code>index.html</code>.\nThat's the root folder and you'd add <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/\"></code> near the top of <code>index.html</code> because <code>/</code> is the root of the app.</p>\n\n<p translation-result=\"on\">但是在共享或生产服务器上，你可能会在子目录下启动服务器。\n比如，当前应用的加载地址可能类似于 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/my/app/</code>，这里的子目录就是 <code>my/app/</code>。所以你就要往服务端版本的 <code>index.html</code> 中添加 <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/my/app/\"></code>。</p><p translation-origin=\"off\">But on the shared or production server, you might serve the app from a subfolder.\nFor example, when the URL to load the app is something like <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/my/app/</code>,\nthe subfolder is <code>my/app/</code> and you should add <code>&#x3C;base <a href=\"api/router/RouterLinkWithHref#href\" class=\"code-anchor\">href</a>=\"/my/app/\"></code> to the server version of the <code>index.html</code>.</p>\n\n<p translation-result=\"on\">这里如果不配置 <code>base</code> 标签，应用就会失败，并在浏览器的控制台中为缺失的文件显示一个 <code>404 - Not Found</code> 错误。看看它<em>试图</em>从哪里去查找那些文件，并据此调整 base 标签。</p><p translation-origin=\"off\">When the <code>base</code> tag is mis-configured, the app fails to load and the browser console displays <code>404 - Not Found</code> errors\nfor the missing files. Look at where it <em>tried</em> to find those files and adjust the base tag appropriately.</p>\n\n<h2 id=\"building-and-serving-for-deployment\" translation-result=\"on\">为部署而构建和启动服务器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-for-deployment\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"building-and-serving-for-deployment\">Building and serving for deployment<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-for-deployment\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在设计和开发应用程序时，通常使用 <code>ng serve</code> 来构建应用，已进行快速的、本地的、迭代式的开发。\n不过，当准备部署时，你必须使用 <code>ng build</code> 命令来构建应用，并在别处部署构建成果。</p><p translation-origin=\"off\">When you are designing and developing applications, you typically use <code>ng serve</code> to build your app for fast, local, iterative development.\nWhen you are ready to deploy, however, you must use the <code>ng build</code> command to build the app and deploy the build artifacts elsewhere.</p>\n\n<p translation-result=\"on\">在构建之前，<code>ng build</code> 和 <code>ng serve</code> 都会清空输出目录，但是只有 <code>ng build</code> 命令才会把生成的构建成果写入到输出目录下。</p><p translation-origin=\"off\">Both <code>ng build</code> and <code>ng serve</code> clear the output folder before they build the project, but only the <code>ng build</code> command writes the generated build artifacts to the output folder.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">输出目录默认为 <code>dist/</code>。\n要想输出到其它目录，请修改 <code>angular.json</code> 中的 <code>outputPath</code>。</p><p translation-origin=\"off\">The output folder is  <code>dist/</code> by default.\nTo output to a different folder, change the <code>outputPath</code> in <code>angular.json</code>.</p>\n\n</div>\n<p translation-result=\"on\"><code>ng serve</code> 命令会构建、监视并使用本地开发服务器从内存中提供网站服务。\n但是，当你将应用部署到其它服务器时，你可能希望仍然能持续看到你对该应用所做的修改。这时候，你可以为 <code>ng build</code> 命令添加 <code>--watch</code> 选项来做到这一点。</p><p translation-origin=\"off\">The <code>ng serve</code> command builds, watches, and serves the application from local memory, using a local development server.\nWhen you have deployed your app to another server, however, you might still want to serve the app so that you can continue to see changes that you make in it.\nYou can do this by adding the <code>--watch</code> option to the <code>ng build</code> command.</p>\n\n<code-example>\nng build --watch\n</code-example>\n<p translation-result=\"on\">像 <code>ng serve</code> 命令一样，当源码文件发生变化时，它会重新生成输出文件。</p><p translation-origin=\"off\">Like the <code>ng serve</code> command, this regenerates output files when source files change.</p>\n\n<p translation-result=\"on\">要了解 CLI 命令的详细信息，参见 <a href=\"cli\">CLI 命令参考手册</a>。</p><p translation-origin=\"off\">For complete details of the CLI commands, see the <a href=\"cli\">CLI command reference</a>.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/change-log\n - guide/npm-packages\n - guide/setup\n - guide/visual-studio-2015\n-->\n<!-- links from this doc:\n - /guide/router\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/core/enableProdMode\n - api/router/RouterLinkWithHref#href\n - api/router/Routes\n - cli\n - cli/build\n - guide/aot-compiler\n - guide/deployment#building-and-serving-for-deployment\n - guide/deployment#deploy-to-github-pages\n - guide/deployment#deployment\n - guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\n - guide/deployment#enable-prod-mode\n - guide/deployment#enable-runtime-production-mode\n - guide/deployment#fallback\n - guide/deployment#fallback-configuration-examples\n - guide/deployment#inspect-the-bundles\n - guide/deployment#lazy-loading\n - guide/deployment#measure-performance\n - guide/deployment#production-optimizations\n - guide/deployment#requesting-services-from-a-different-server-cors\n - guide/deployment#routed-apps-must-fallback-to-indexhtml\n - guide/deployment#server-configuration\n - guide/deployment#simplest-deployment-possible\n - guide/deployment#the-base-tag\n - guide/router#asynchronous-routing\n - guide/router#preloading\n - http://enable-cors.org/server.html\n - http://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - http://nginx.org/\n - http://stackoverflow.com/a/26152011/2116927\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://firebase.google.com/docs/hosting/\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular-buch/angular-cli-ghpages\n - https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/deployment.md?message=docs%3A%20请简述你的修改...\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/join\n - https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\n - https://help.github.com/articles/create-a-repo/\n - https://help.github.com/articles/what-is-github-pages/\n - https://httpd.apache.org/\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\n - https://pages.github.com/\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net/\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.webpagetest.org/\n-->"}