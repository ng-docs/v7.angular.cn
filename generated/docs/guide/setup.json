{
  "id": "guide/setup",
  "title": "Setup for local development",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/setup.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"setup-for-local-development\" translation-result=\"on\">搭建本地开发环境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#setup-for-local-development\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"setup-for-local-development\">Setup for local development<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#setup-for-local-development\"><i class=\"material-icons\">link</i></a></h1>\n\n<a id=\"develop-locally\"></a>\n<p translation-result=\"on\"><live-example name=\"quickstart\">《快速上手》在线编程</live-example>例子是 Angular 的<em>游乐场</em>。\n它不是开发真实应用的地方。\n你应该在自己的电脑上<a href=\"guide/setup#why-locally\" title=\"为什么在本地开发？\">本地开发</a>... 你也应该在本地环境学习 Angular。</p><p translation-origin=\"off\">The <live-example name=\"quickstart\">QuickStart live-coding</live-example> example is an Angular <em>playground</em>.\nIt's not where you'd develop a real application.\nYou <a href=\"guide/setup#why-locally\" title=\"Why develop locally\">should develop locally</a> on your own machine ... and that's also how we think you should learn Angular.</p>\n\n<p translation-result=\"on\">利用 <a href=\"https://github.com/angular/quickstart\" title=\"安装 github 《快速上手》库\">github 上</a>的<strong>《快速上手》种子</strong>在你的电脑上搭建一个新项目是很快很容易的。</p><p translation-origin=\"off\">Setting up a new project on your machine is quick and easy with the <strong>QuickStart seed</strong>,\nmaintained <a href=\"https://github.com/angular/quickstart\" title=\"Install the github QuickStart repo\">on github</a>.</p>\n\n<p translation-result=\"on\">请确保你已经安装了 <a href=\"guide/setup#install-prerequisites\" title=\"如果你没有 Node.js 和 npm？\">Node.js® 和 npm</a>。</p><p translation-origin=\"off\">Make sure you have <a href=\"guide/setup#install-prerequisites\" title=\"What if you don&#x27;t have Node.js and npm?\">Node.js® and npm installed</a>.</p>\n\n<a id=\"clone\"></a>\n<h2 id=\"clone\" translation-result=\"on\">克隆<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#clone\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"clone\">Clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#clone\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">运行下列命令来执行<em>克隆并启动</em>步骤。</p><p translation-origin=\"off\">Perform the <em>clone-to-launch</em> steps with these terminal commands.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  git clone https://github.com/angular/quickstart.git quickstart\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">在<em>Bash for Windows</em>中 <code>npm start</code> 可能会失败，因为到 2017-04 为止它还不支持访问网络上的服务器。</p><p translation-origin=\"off\"><code>npm start</code> fails in <em>Bash for Windows</em> in versions earlier than the Creator's Update (April 2017).</p>\n\n</div>\n<a id=\"download\"></a>\n<h2 id=\"download\" translation-result=\"on\">下载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#download\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"download\">Download<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#download\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"下载《快速上手》种子库\">下载《快速上手》种子</a>\n并解压到你的项目目录中。然后执行下面的命令完成剩余步骤。</p><p translation-origin=\"off\"><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">Download the QuickStart seed</a>\nand unzip it into your project folder. Then perform the remaining steps with these terminal commands.</p>\n\n<code-example language=\"sh\" class=\"code-shell\">\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<p translation-result=\"on\">在<em>Bash for Windows</em>中 <code>npm start</code> 可能会失败，因为到 2017-01 为止它还不支持访问网络上的服务器。</p><p translation-origin=\"off\"><code>npm start</code> fails in <em>Bash for Windows</em> in versions earlier than the Creator's Update (April 2017).</p>\n\n</div>\n<a id=\"non-essential\"></a>\n<h2 id=\"delete-non-essential-files-optional\" translation-result=\"on\">删除<em>非必需</em>文件（可选）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"delete-non-essential-files-optional\">Delete <em>non-essential</em> files (optional)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#delete-non-essential-files-optional\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以快速删除一些涉及到测试和维护快速开始版本库的 <em>非必需</em> 文件\n（<strong><em>包括所有 git 相关的文件</em></strong>如 <code>.git</code> 文件夹和 <code>.gitignore</code>！）。</p><p translation-origin=\"off\">You can quickly delete the <em>non-essential</em> files that concern testing and QuickStart repository maintenance\n(<strong><em>including all git-related artifacts</em></strong> such as the <code>.git</code> folder and <code>.gitignore</code>!).</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">请只在开始时执行此删除操作，以防你自己的测试和 git 文件被意外删除！</p><p translation-origin=\"off\">Do this only in the beginning to avoid accidentally deleting your own tests and git setup!</p>\n\n</div>\n<p translation-result=\"on\">在项目目录下打开一个终端窗口，并根据你的操作系统执行以下命令：</p><p translation-origin=\"off\">Open a terminal window in the project folder and enter the following commands for your environment:</p>\n\n<h3 id=\"osx-bash\">OS/X (bash)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#osx-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  xargs rm -rf &#x3C; non-essential-files.osx.txt\n  rm src/app/*.spec*.ts\n  rm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  for /f %i in (non-essential-files.txt) do del %i /F /S /Q\n  rd .git /s /q\n  rd e2e /s /q\n\n</code-example>\n<a id=\"seed\"></a>\n<h2 id=\"whats-in-the-quickstart-seed\" translation-result=\"on\">《快速上手》种子库里都有什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-in-the-quickstart-seed\">What's in the QuickStart seed?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#whats-in-the-quickstart-seed\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><strong>《快速上手》种子</strong> 包含了与《快速上手》游乐场一样的应用，但是，它真正的目的是提供坚实的<em>本地</em>开发基础。\n所以你的电脑里的项目目录里面有<em>更多文件</em>，其中的大部分你都会<a href=\"guide/file-structure\">在稍后学到</a>。</p><p translation-origin=\"off\">The <strong>QuickStart seed</strong> contains the same application as the QuickStart playground.\nBut its true purpose is to provide a solid foundation for <em>local</em> development.\nConsequently, there are <em>many more files</em> in the project folder on your machine,\nmost of which you can <a href=\"guide/file-structure\">learn about later</a>.</p>\n\n<a id=\"app-files\"></a>\n<p translation-result=\"on\">注意<strong><code>/src</code></strong>目录中以下三个 TypeScript (<code>.ts</code>) 文件：</p><p translation-origin=\"off\">Focus on the following three TypeScript (<code>.ts</code>) files in the <strong><code>/src</code></strong> folder.</p>\n\n<div class=\"filetree\">\n  <div class=\"file\">\n<p>    src</p>\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n<p>      app</p>\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n<p>        app.component.ts</p>\n      </div>\n      <div class=\"file\">\n<p>        app.module.ts</p>\n      </div>\n    </div>\n    <div class=\"file\">\n<p>      main.ts</p>\n    </div>\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `&#x3C;h1>Hello {{name}}&#x3C;/h1>`\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ AppComponent ],\n  <a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">bootstrap</a>:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">所有指南和烹饪书都至少有<em>这几个核心文件</em>。每个文件都有独特的用途，并且随着应用的成长各自独立演变。</p><p translation-origin=\"off\">All guides and cookbooks have <em>at least these core files</em>.\nEach file has a distinct purpose and evolves independently as the application grows.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录之外的文件为构建、部署和测试 app 相关的文件，他们只包括配置文件和外部依赖。</p><p translation-origin=\"off\">Files outside <code>src/</code> concern building, deploying, and testing your app.\nThey include configuration files and external dependencies.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录下的文件才“属于”你的 app。\n除非明确指出，否则教程中添加的 TypeScript，HTML 和 CSS 文件都在 <code>src/</code> 目录下，\n大多数在 <code>src/app</code> 目录中。</p><p translation-origin=\"off\">Files inside <code>src/</code> \"belong\" to your app.\nAdd new Typescript, HTML and CSS files inside the <code>src/</code> directory, most of them inside <code>src/app</code>,\nunless told to do otherwise.</p>\n\n<p translation-result=\"on\"><code>src/</code> 目录文件详情如下：</p><p translation-origin=\"off\">The following are all in <code>src/</code></p>\n\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"20%\">\n  \n  <col width=\"80%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n<p translation-result=\"on\">      文件</p><p translation-origin=\"off\">      File</p>\n\n    </th>\n    <th>\n<p translation-result=\"on\">      用途</p><p translation-origin=\"off\">      Purpose</p>\n\n    </th>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>app/app.component.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      定义与《快速上手》游乐场同样的 <code>AppComponent</code>。\n它是<strong>根</strong>组件，随着应用的演变，它将变成一颗嵌套组件树。</p><p translation-origin=\"off\">      Defines the same <code>AppComponent</code> as the one in the QuickStart playground.\nIt is the <strong>root</strong> component of what will become a tree of nested components\nas the application evolves.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>app/app.module.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      定义 <code>AppModule</code>，<a href=\"guide/bootstrapping\" title=\"AppModule: 根模块\">根模块</a>为 Angular 描述如何组装应用。\n目前，它只声明了 <code>AppComponent</code>。\n不久，它将声明更多组件。</p><p translation-origin=\"off\">      Defines <code>AppModule</code>, the  <a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">root module</a> that tells Angular how to assemble the application.\nRight now it declares only the <code>AppComponent</code>.\nSoon there will be more components to declare.</p>\n\n    </td>\n  </tr>\n  <tr>\n    <td>\n<p>      <code>main.ts</code></p>\n    </td>\n    <td>\n<p translation-result=\"on\">      使<a href=\"guide/glossary#jit\">即时 (JIT) 编译器</a>用编译应用并且在浏览器中<a href=\"guide/bootstrapping\" title=\"启动应用\">启动</a>并运行应用。\n对于大多数项目的开发，这都是合理的选择。而且它是在像 Stackblitz 这样的<em>在线编程</em>环境中运行例子的唯一选择。\n你将在本文档中学习其他编译和开发选择。</p><p translation-origin=\"off\">      Compiles the application with the <a href=\"guide/glossary#jit\">JIT compiler</a> and\n<a href=\"guide/bootstrapping\">bootstraps</a>\nthe application's main module (<code>AppModule</code>) to run in the browser.\nThe JIT compiler is a reasonable choice during the development of most projects and\nit's the only viable choice for a sample running in a <em>live-coding</em> environment like Stackblitz.\nYou'll learn about alternative compiling and <a href=\"guide/deployment\">deployment</a> options later in the documentation.</p>\n\n    </td>\n  </tr>\n</tbody></table>\n<div class=\"alert is-helpful\">\n<h3 id=\"next-step\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#next-step\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"next-step\">Next Step<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#next-step\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你是 Angular 初学者，建议跟着<a href=\"tutorial\" title=\"《英雄指南》教程\">教程</a>学习。</p><p translation-origin=\"off\">If you're new to Angular, we recommend you follow the <a href=\"tutorial\" title=\"Tour of Heroes tutorial\">tutorial</a>.</p>\n\n</div>\n<p><br><br><br><br></p>\n<a id=\"install-prerequisites\"></a>\n<h2 id=\"appendix-nodejs-and-npm\" translation-result=\"on\">附录：node 与 npm<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-nodejs-and-npm\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-nodejs-and-npm\">Appendix: Node.js and npm<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-nodejs-and-npm\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><a href=\"https://nodejs.org/en/\">Node.js</a> 和 <a href=\"https://www.npmjs.com/\">npm</a> 包管理器对使用 Angular 和其他平台进行现代网络开发是至关重要的。\nNode.js 用来支持客户端开发和构建工具。<em>npm</em> 包管理器本身就是一个 <em>Node.js</em> 应用，用于安装 JavaScript 库。</p><p translation-origin=\"off\"><a href=\"https://nodejs.org/en/\">Node.js</a> and the <a href=\"https://www.npmjs.com/\">npm</a> package manager are essential to modern web development with Angular and other platforms.\nNode.js powers client development and build tools.\nThe <em>npm</em> package manager, which is itself a <em>Node.js</em> application, installs JavaScript libraries.</p>\n\n<p translation-result=\"on\">如果你的电脑没有安装它们，请<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" title=\"安装 Node.js 和更新 npm\">现在安装</a>。</p><p translation-origin=\"off\"><a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" title=\"Installing Node.js and updating npm\">Get them now</a> if they're not already installed on your machine.</p>\n\n<p translation-result=\"on\">在终端/控制器窗口运行命令 <code>node -v</code> 和 <code>npm -v</code>，来<strong>确认你运行的 Node.js 是 <code>v8.x</code> 或更高，npm 为 <code>5.x</code> 或更高。</strong>\n老版本会产生错误。</p><p translation-origin=\"off\"><strong>Verify that you are running Node.js <code>v8.x</code> or higher and npm <code>5.x</code> or higher</strong>\nby running the commands <code>node -v</code> and <code>npm -v</code> in a terminal/console window.\nOlder versions produce errors.</p>\n\n<p translation-result=\"on\">我们推荐使用 <a href=\"https://github.com/creationix/nvm\">nvm</a> 来管理多版本 Node.js 和 npm。\n如果你的电脑上已经有使用其他版本 Node.js 和 npm 的项目，你可能需要 nvm。</p><p translation-origin=\"off\">We recommend <a href=\"https://github.com/creationix/nvm\">nvm</a> for managing multiple versions of Node.js and npm.\nYou may need <a href=\"https://github.com/creationix/nvm\">nvm</a> if you already have projects running on your machine that use other versions of Node.js and npm.</p>\n\n<a id=\"why-locally\"></a>\n<h2 id=\"appendix-why-develop-locally\" translation-result=\"on\">附录：为何在本地开发<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-why-develop-locally\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-why-develop-locally\">Appendix: Why develop locally<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-why-develop-locally\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在浏览器中<live-example title=\"QuickStart Seed in Stackblitz\">在线编程</live-example>是很好的探索 Angular 的方法。</p><p translation-origin=\"off\"><live-example title=\"QuickStart Seed in Stackblitz\">Live coding</live-example> in the browser is a great way to explore Angular.</p>\n\n<p translation-result=\"on\">几乎每章文档里面的链接都在浏览器中打开完整的例子。\n你可以用这些代码做实验，或者与朋友共享你的修改，或者下载并在你自己的电脑上运行这些代码。</p><p translation-origin=\"off\">Links on almost every documentation page open completed samples in the browser.\nYou can play with the sample code, share your changes with friends, and download and run the code on your own machine.</p>\n\n<p translation-result=\"on\"><a href=\"guide/quickstart\" title=\"Angular 快速起步游乐场\">快速上手</a>仅仅展示了 <code>AppComponent</code> 文件。\n它在内部创建了只为<em>游乐场</em>而准备的等价 <code>app.module.ts</code> 和 <code>main.ts</code>。\n所以读者可以在零干扰的情况下探索 Angular。\n其他例子是基于 《快速上手》种子的。</p><p translation-origin=\"off\">The <a href=\"guide/quickstart\" title=\"Angular QuickStart Playground\">Getting Started</a> shows just the <code>AppComponent</code> file.\nIt creates the equivalent of <code>app.module.ts</code> and <code>main.ts</code> internally <em>for the playground only</em>.\nso the reader can discover Angular without distraction.\nThe other samples are based on the QuickStart seed.</p>\n\n<p translation-result=\"on\">虽然有这么多的乐趣，但是...</p><p translation-origin=\"off\">As much fun as this is ...</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 你不能在 Stackblitz 里面发布你的应用</p><p translation-origin=\"off\">you can't ship your app in Stackblitz</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 编程时你不可能总是在线</p><p translation-origin=\"off\">you aren't always online when writing code</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 在浏览器中编译 TypeScript 很慢</p><p translation-origin=\"off\">transpiling TypeScript in the browser is slow</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 只有本地 IDE 有类型支持、代码重构和代码自动完成</p><p translation-origin=\"off\">the type support, refactoring, and code completion only work in your local IDE</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">把<live-example title=\"QuickStart Seed in Stackblitz\">在线编程</live-example>环境当做<em>游乐场</em>，一个尝试文档例子和自己做实验的地方。\n当你想要<a href=\"https://github.com/angular/angular.io/issues/new\" target=\"_blank\" title=\"提交关于文档的问题\">提交关于文档的问题</a>或者\n<a href=\"https://github.com/angular/angular/issues/new\" target=\"_blank\" title=\"提交关于 Angular 的问题\">提交关于 Angular 自身的问题</a>时，\n它是重现错误的完美地方。</p><p translation-origin=\"off\">Use the <live-example title=\"QuickStart Seed in Stackblitz\">live coding</live-example> environment as a <em>playground</em>,\na place to try the documentation samples and experiment on your own.\nIt's the perfect place to reproduce a bug when you want to\n<a href=\"https://github.com/angular/angular/issues/new\" title=\"File a documentation issue\">file a documentation issue</a> or\n<a href=\"https://github.com/angular/angular/issues/new\" title=\"File an Angular issue\">file an issue with Angular itself</a>.</p>\n\n<p translation-result=\"on\">对于现实项目开发，我们强烈推荐在<a href=\"guide/setup#develop-locally\">本地开发</a>。</p><p translation-origin=\"off\">For real development, we strongly recommend <a href=\"guide/setup#develop-locally\">developing locally</a>.</p>\n\n<h2 id=\"appendix-develop-locally-with-ie\" translation-result=\"on\">附录：使用 IE 进行本地开发<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-develop-locally-with-ie\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-develop-locally-with-ie\">Appendix: develop locally with IE<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-develop-locally-with-ie\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用 <code>ng serve</code> 在本地进行 Angular 开发，就会在浏览器和本地开发服务器之间自动建立一个 <code>WebSocket</code> 连接，因此，当你的代码变化时，浏览器也会自动刷新。</p><p translation-origin=\"off\">If you develop angular locally with <code>ng serve</code>, there will be <code>websocket</code> connection being setup automatically between browser and local dev server, so when your code change, browser can automatically refresh.</p>\n\n<p translation-result=\"on\">在 Windows 中，默认情况下一个应用只能有六个 WebSocket 连接，参见 <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&#x26;MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN 中的 WebSocket 设置部分</a>。\n所以，如果 IE 手动刷新或被 <code>ng serve</code> 触发了自动刷新，有时候 WebSocket 可能无法正常关闭，当 WebSocket 的连接数超限时，就会抛出 <code>SecurityError</code> 异常。请放心，这个异常对 Angular 应用没什么影响，你重启一下 IE 就能消除这个错误，或者修改 Windows 注册表来修改这个上限。</p><p translation-origin=\"off\">In windows, by default one application can only have 6 websocket connections, <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&#x26;MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN WebSocket Settings</a>.\nSo if IE was refreshed manunally or automatically by <code>ng serve</code>, sometimes, the websocket will not close properly, when websocket connections exceed limitations, <code>SecurityError</code> will be thrown, this error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.</p>\n\n<h2 id=\"appendix-test-using-fakeasyncasync\" translation-result=\"on\">附录：使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 进行测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-test-using-fakeasyncasync\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"appendix-test-using-fakeasyncasync\">Appendix: test using <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/setup#appendix-test-using-fakeasyncasync\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">如果你使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 辅助函数来运行单元测试（详情参见<a href=\"guide/testing#async-test-with-fakeasync\">测试指南</a>），就要在测试的准备文件中导入 <code>zone.js/dist/zone-testing</code>。</p><p translation-origin=\"off\">If you use the <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper function to run unit tests (for details, read <a href=\"guide/testing#async-test-with-fakeasync\">testing guide</a>), you need to import <code>zone.js/dist/zone-testing</code> in your test setup file.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">如果你是用 <code>Angular/CLI</code> 创建的项目，那么它已经在 <code>src/test.ts</code> 中导入过了。</p><p translation-origin=\"off\">If you create project with <code>Angular/CLI</code>, it is already imported in <code>src/test.ts</code>.</p>\n\n</div>\n<p translation-result=\"on\">在以前版本的 <code>Angular</code> 中，下列文件曾被导入或添加到 html 文件中：</p><p translation-origin=\"off\">And in the earlier versions of <code>Angular</code>, the following files were imported or added in your html file:</p>\n\n<code-example>\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/proxy';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/fake-async-test';\n</code-example>\n<p translation-result=\"on\">你仍然可以分别导入这些文件，不过导入顺序很重要，你必须在 <code>sync-test</code>、<code>async-test</code>、<code>fake-async-test</code> 和 <code>jasmine-patch</code> 之前导入 <code>proxy</code>。还要注意在 <code>jasmine-patch</code> 之前导入<code>sync-test</code>。所以，建议你只导入 <code>zone-testing</code> 而不要分别加载那些文件。</p><p translation-origin=\"off\">You can still load those files separately, but the order is important, you must import <code>proxy</code> before <code>sync-test</code>, <code>async-test</code>, <code>fake-async-test</code> and <code>jasmine-patch</code>. And you also need to import <code>sync-test</code> before <code>jasmine-patch</code>, so it is recommended to just import <code>zone-testing</code> instead of loading those separated files.</p>\n\n\n</div>\n\n<!-- links to this doc:\n - guide/change-log\n - guide/testing\n - guide/typescript-configuration\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Component#template\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/core/NgModule#imports\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - guide/bootstrapping\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/quickstart\n - guide/setup#appendix-develop-locally-with-ie\n - guide/setup#appendix-nodejs-and-npm\n - guide/setup#appendix-test-using-fakeasyncasync\n - guide/setup#appendix-why-develop-locally\n - guide/setup#clone\n - guide/setup#delete-non-essential-files-optional\n - guide/setup#develop-locally\n - guide/setup#download\n - guide/setup#install-prerequisites\n - guide/setup#next-step\n - guide/setup#osx-bash\n - guide/setup#setup-for-local-development\n - guide/setup#whats-in-the-quickstart-seed\n - guide/setup#why-locally\n - guide/setup#windows\n - guide/testing#async-test-with-fakeasync\n - tutorial\n - https://docs.npmjs.com/getting-started/installing-node\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/setup.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/angular.io/issues/new\n - https://github.com/angular/angular/issues/new\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n - https://github.com/creationix/nvm\n - https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396#websocket_maxconn\n - https://nodejs.org/en/\n - https://www.npmjs.com/\n-->"
}